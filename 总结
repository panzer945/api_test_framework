请求方法:
requests.get()
requests.post()
requests.put()
...
requests.session(): 用于保持会话（session）
除了requests.session()外，其他请求方法的参数都差不多，都包含url，params, data, headers, cookies, files, auth, timeout等等
-----------------------------------------------------------------------
(1)requests.request(method,url,**kwargs):构造并发送一个request，返回一个response对象
请求参数：
method：request对象的方法(POST)
url：request对象的URL
params：可选的，要在查询字符串中发送的字典或字节request
data：可选的，字典或元祖列表以表单编码，字节或类似文件的对象在主体中发送[(key,value)]
json：可选的，一个json可序列化的python对象，在主体中发送request
headers：可选的，用于编写http头信息
cookies：可选，用dict或cookieJar对象发送Cookies
file：可选，用于多部分编码上传的字典，可以是多元祖，其中是定义给定文件的内容类型的字符串，以及包含问文件添加的额外头文件的类字典对象
auth：可选，身份验证元祖，自定义http身份验证
timeout：可选，发送等待请求数据的超时时间(float/tuple),设置为元祖即为练级connect和read读取超时，如果设置为None即为永久等待
allow_redirects：布尔值，可选，启用或禁用GET,OPTIONS,POST,PUT,PATCH,DELETE,HEAD重定向，默认为true
proxies：可选，字典映射协议到代理的URL
verify：可选，可以是布尔值，可以指定验证服务器的TLS证书路径，默认为true
stream：可选，如果是False，响应内容将立即下载
cert：可选，如果是string，则为ssl客户端证书文件路径，如果是元祖则('cert','key')指定证书和密钥

-----------------------------------------------------------------------
响应解析
res.status_code: 响应的HTTP状态码
res.reason: 响应的状态码含义
req.text：响应的文本格式，按req.encoding解码
req.content: 响应的二进制格式
req.encoding: 解码格式，可以通过修改req.encoding='utf-8'来解决一部分中文乱码问题
req.apparent_encoding：真实编码，由chardet库提供的明显编码
req.json(): （注意，有括号），响应的json对象（字典）格式，慎用！如果响应文本不是合法的json文本，或报错
req.headers: 响应头
req.cookies: 响应的cookieJar对象，可以通过req.cookies.get(key)来获取响应cookies中某个key对应的值

-----------------------------------------------------------------------
JSON文本和JSON对象的区别：
JSON文本是符合JSON格式的文本，实际上是一个字符串
JSON对象是内存中一个对象，拥有属性和方法，可以通过对象获取其中的参数信息

Python中我们一般提到JSON对象指的是字典

Python的字典的格式和JSON格式，稍有不同：
字典中的引号支持单引号和双引号，JSON格式只支持双引号
字典中的True/False首字母大写，JSON格式为true/false
字典中的空值为None, JSON格式为null

JSON格式操作方法
序列化（字典 -> 文本/文件句柄）： json.dumps()/json.dump()
反序列化（文本/文件句柄 -> 字典) : json.loads()/json.load()

什么时候使用JSON对象（字典）什么时候使用JSON文本？
一般在组装data参数时，建议使用字典格式，发送请求时用json.dumps(data)转化为文本发送，收到请求后使用json.loads(res.text)转化为字典，方便我们获取其中的参数信息
-----------------------------------------------------------------------
对象在HTTP中的传输过程:
HTTP协议是超文本传输协议，是通过文本或二进制进行传输的，所以我们发送的请求要转化成文本进行传输，收到的响应也是文本格式，如果是JSON，一般还需要将文本格式重新转化为对象

JSON对象（Python字典） -> 转为文本请求 -> 发送请求
-> 服务器收到文本请求 -> 将文本请求转化为对象，获取其中的参数，处理业务
-> 返回文本格式的响应 -> 客户端转为对象格式来从响应中取值

-----------------------------------------------------------------------
appid或token方式：
appid: 系统为合法用户赋予的访问id，固定的字符串，一般经过加密以确保HTTP传输中的安全
token: 即令牌，固定或需要动态申请（有一定有效期），一般由用户信息及申请时间计算加密而成，用于验证接口访问的权限

token与session的区别：
session是存在服务器的，服务端通过验证客户端的请求所携带的session值在服务会话中是否存在，来验证用户是否合法
token: 是按一定算法加密计算出来的，服务端通过解密客户端所携带的token值来验证用户是否合法
**示例： **

-------------------------------------------------------------------------------------------------
用例断言
unittest提供了丰富的断言方法，常用为以下几种：

判断相等
assertEqual(a,b)/assertNotEqual(a,b): 断言值是否相等
assertIs(a,b)/assertIsNot(a,b): 断言是否同一对象（内存地址一样）
assertListEqual(list1, list2)/assertItemNotEqual(list1, list2): 断言列表是否相等
assertDictEqual(dict1, dict2)/assertDictNotEqual(dict1, dict2): 断言字典是否相等
是否为空
assertIsNone(a)/assertIsNotNone(a)
判断真假
assertTrue(a)/assertFalse(a)
是否包含
assertIn(a,b)/assertNotIn(a,b) # b中是否包含a
大小判断
assertGreater(a,b)/assertLess(a,b) : 断言a>b / 断言a<b
assertGreaterEqual(a,b)/assertLessEqual: 断言a>=b / 断言a<=b
类型判断
assertIsInstance(a,dict)/assertNotIsInstance(a,list) # 断言a为字典 / 断言a非列表


-------------------------------------------------------------------------------------------------

日志级别（Log Level）:
    CRITICAL: 用于输出严重错误信息
    ERROR: 用于输出错误信息
    WARNING: 用于输出警示信息
    INFO: 用于输出一些提升信息
    DEBUG: 用于输出一些调试信息

    优先级 CRITICAL > ERROR > WARNING > INFO > DEBUG
    指定level = logging.DEBUG所有等级大于等于DEBUG的信息都会输出
    若指定level = logging.ERROR WARNING,INFO,DEBUG小于设置级别的信息不会输出日志格式:

-------------------------
日志格式:
    %(levelno)s: 打印日志级别的数值
    %(levelname)s: 打印日志级别名称
    %(pathname)s: 打印当前执行程序的路径，其实就是sys.argv[0]
    %(filename)s: 打印当前执行程序名
    %(funcName)s: 打印日志的当前函数
    %(lineno)d: 打印日志的当前行号
    %(asctime)s: 打印日志的时间
    %(thread)d: 打印线程ID
    %(threadName)s: 打印线程名称
    %(process)d: 打印进程ID
    %(message)s: 打印日志信息

--------------------------------------------------------------------------
git管理：（git Bash中输入以下命令）
git init：初始化git项目
git add . : 添加所有文件到 变更列表（注意有个点）
git commit -m "首次提交"： 本地提交， 引号中书写change log，变更备注
git remote add origin https://github.com/superhin001/api_test.git：首次提交需要关联远程仓库
git push -u origin master：推送到远端（origin）master分支（此时需要输入用户名和密码）
